-- 테이블 전체목록--
SELECT * FROM MEMBER;
SELECT * FROM PRODUCT;
SELECT * FROM CART;
SELECT * FROM COUPON;
SELECT * FROM BUYINFO;
SELECT * FROM REVIEW;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ※경고※ --
-- 테이블 삭제 명령어 --
DROP TABLE MEMBER;
DROP TABLE PRODUCT;
DROP TABLE CART;
DROP TABLE COUPON;
DROP TABLE BUYINFO;
DROP TABLE REVIEW;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 컬럼명 변경
ALTER TABLE PRODUCT RENAME COLUMN REG_DATE TO REG_TIME;

-- 트리거를 확인하는 쿼리
SELECT trigger_name, trigger_body
FROM user_triggers
WHERE table_name = 'REVIEW';

SELECT TRIGGER_NAME, TABLE_NAME, TRIGGER_TYPE, TRIGGERING_EVENT
FROM USER_TRIGGERS;


-- 트리거 활성화 쿼리(디비버에서 사용 권장)

-- 트리거를 생성한다 이름은 INSERT_REVIEW_TRIGGER
CREATE TRIGGER INSERT_REVIEW_TRIGGER
-- 트리거 발동 시기는 리뷰 테이블에 INSERT가 작동한 후
AFTER INSERT ON REVIEW
-- 트리거를 행에 적용하는 문구(기본양식)
FOR EACH ROW
-- 트리거에서 작동할 쿼리
BEGIN
    --BUYINFO테이블에서 HAS_REVIEW 1로 업데이트한다
    UPDATE BUYINFO
    SET HAS_REVIEW = 1
    -- :new.B_ID = INSERT(트리거가 발생하는 쿼리)가 작동했을 때 사용된 B_ID
    WHERE B_ID = :new.B_ID;
-- 트리거 에서 작동할 쿼리 종료
END;


-- 트리거를 생성한다 이름은 DELETE_REVIEW_TRIGGER
CREATE TRIGGER DELETE_REVIEW_TRIGGER
-- 트리거 발동 시기는 리뷰 테이블에 DELETE가 작동한 후
AFTER DELETE ON REVIEW
-- 트리거를 행에 적용하는 문구(기본양식)
FOR EACH ROW
-- 트리거에서 작동할 쿼리
BEGIN
    -- BUYINFO 테이블에서 HAS_REVIEW를 0으로 업데이트한다
    UPDATE BUYINFO
    SET HAS_REVIEW = 0
    -- :old.B_ID = DELETE(트리거가 발생하는 쿼리)가 작동하기 전의 B_ID
    WHERE B_ID = :old.B_ID;
-- 트리거에서 작동할 쿼리 종료
END;


--트리거 삭제
DROP TRIGGER INSERT_REVIEW_TRIGGER;
DROP TRIGGER DELETE_REVIEW_TRIGGER;


CREATE TABLE CARTMEMBER (
C_ID INT PRIMARY KEY,
M_ID VARCHAR2(15) NOT NULL
);

CREATE TABLE CARTDETAIL (
CD_ID INT NOT NULL,
C_ID INT NOT NULL,
P_ID INT NOT NULL,
C_QTY INT NOT NULL
);


DROP TABLE CARTMEMBER;
DROP TABLE CARTDETAIL;


-- 장바구니 테이블
INSERT INTO CARTMEMBER (C_ID, M_ID) VALUES (1, 'user1');
INSERT INTO CARTMEMBER (C_ID, M_ID) VALUES (2, 'user2');


-- 장바구니 상세 테이블
INSERT INTO CARTDETAIL (CD_ID, C_ID, P_ID, C_QTY) VALUES (1, 1, 101, 2);
INSERT INTO CARTDETAIL (CD_ID, C_ID, P_ID, C_QTY) VALUES (2, 1, 102, 3);
INSERT INTO CARTDETAIL (CD_ID, C_ID, P_ID, C_QTY) VALUES (3, 2, 101, 1);


SELECT * FROM CARTMEMBER;
SELECT * FROM CARTDETAIL;


INSERT INTO CART (C_ID, M_ID, P_ID, C_QTY) VALUES (1, 'user1', 101, 2);
INSERT INTO CART (C_ID, M_ID, P_ID, C_QTY) VALUES (2, 'user1', 102, 3);
INSERT INTO CART (C_ID, M_ID, P_ID, C_QTY) VALUES (3, 'user2', 101, 1);


SELECT * FROM CART;



SELECT CM.C_ID, CM.M_ID, CD.P_ID, CD.C_QTY, P.P_NAME, P.SELLING_PRICE, P.IMAGE_PATH
FROM CARTMEMBER CM
JOIN CARTDETAIL CD ON CM.C_ID = CD.C_ID
JOIN PRODUCT P ON CD.P_ID = P.P_ID
WHERE CM.M_ID = 'user1';


SELECT C.C_ID, C.M_ID, C.P_ID, C.C_QTY, P.P_NAME, P.SELLING_PRICE, P.IMAGE_PATH
FROM CART C
JOIN PRODUCT P ON C.P_ID = P.P_ID
WHERE C.M_ID = 'user1';




INSERT INTO MEMBER (
    M_ID, M_NAME, M_PASSWORD, DOB, GENDER, PHONE_NUMBER,
    EMAIL, M_POSTCODE, M_ADDRESS, M_DETAILED_ADDRESS,
    GRADE, HEALTH, LOGIN_TYPE, KAKAO_ID
) VALUES (
    'user1', '테스트1', '1234', TO_DATE('1990-01-01', 'YYYY-MM-DD'),
    '남', '010-1234-5678', 'example@example.com', 12345, '서울시 강남구', '123번지',
    'USER', '눈;뼈;피부', 'local', 'kakao123'
);


-- 회원정보
CREATE TABLE MEMBER_INFO (
    M_ID VARCHAR2(15) PRIMARY KEY,
    M_NAME VARCHAR2(60) NOT NULL,
    M_PASSWORD VARCHAR2(15) NOT NULL,
    DOB DATE NOT NULL,
    GENDER VARCHAR2(3) NOT NULL,
    PHONE_NUMBER VARCHAR2(13) NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    M_POSTCODE INT NOT NULL,
    M_ADDRESS VARCHAR2(255) NOT NULL,
    M_DETAILED_ADDRESS VARCHAR2(255) NOT NULL,
    GRADE VARCHAR2(5) NOT NULL,
    LOGIN_TYPE VARCHAR2(15),
    KAKAO_ID VARCHAR2(19)
);

-- 건강상태 테이블
CREATE TABLE HEALTH_STATUS (
	-- 건강상태의 PK번호
    HS_ID INT PRIMARY KEY,
    -- 건상상태 종류(눈, 간... 등)
    HS_NAME VARCHAR2(255) NOT NULL
);

-- 회원의과 건강 상태 테이블
CREATE TABLE MEMBER_HEALTH_STATUS (
	-- 회원의 PK
    M_ID VARCHAR2(15),
    -- 건강상태의 PK
    HS_ID INT
);


-- MEMBER 테이블에 테스트 데이터 삽입
INSERT INTO MEMBER_INFO (M_ID, M_NAME, M_PASSWORD, DOB, GENDER, PHONE_NUMBER, EMAIL, M_POSTCODE, M_ADDRESS, M_DETAILED_ADDRESS, GRADE, LOGIN_TYPE, KAKAO_ID) VALUES
('user1', '사용자1', 'password1', TO_DATE('1990-01-01', 'YYYY-MM-DD'), '남', '010-1234-5678', 'user1@example.com', 12345, '서울시 강남구', '123번지', 'user', 'local', 'kakao123');
INSERT INTO MEMBER_INFO (M_ID, M_NAME, M_PASSWORD, DOB, GENDER, PHONE_NUMBER, EMAIL, M_POSTCODE, M_ADDRESS, M_DETAILED_ADDRESS, GRADE, LOGIN_TYPE, KAKAO_ID) VALUES
('user2', '사용자2', 'password2', TO_DATE('1985-05-15', 'YYYY-MM-DD'), '여', '010-9876-5432', 'user2@example.com', 54321, '서울시 종로구', '456번지', 'admin', 'local', 'kakao456');

-- MEMBER_HEALTH_STATUS 테이블에 테스트 데이터 삽입
INSERT INTO MEMBER_HEALTH_STATUS (M_ID, HEALTH_ID) VALUES ('user1', 1);
INSERT INTO MEMBER_HEALTH_STATUS (M_ID, HEALTH_ID) VALUES ('user1', 2); 
INSERT INTO MEMBER_HEALTH_STATUS (M_ID, HEALTH_ID) VALUES ('user2', 3); 



-- 새로운 건강상태 데이터 삽입
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '뼈');
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '간');
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '눈');
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '활력');
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '두뇌');
INSERT INTO HEALTH_STATUS (HS_ID, HS_NAME) VALUES (NVL((SELECT MAX(HS_ID) FROM HEALTH_STATUS), 0) + 1, '피부');




-- MEMBER_HEALTH_STATUS 테이블 삭제
DROP TABLE MEMBER_HEALTH_STATUS;

-- HEALTH_STATUS 테이블 삭제
DROP TABLE HEALTH_STATUS;

-- MEMBER 테이블 삭제
DROP TABLE MEMBER_INFO;


SELECT M_ID, M_NAME FROM MEMBER;

SELECT M_ID, M_NAME FROM MEMBER_INFO;

SELECT * FROM HEALTH_STATUS;

SELECT * FROM MEMBER_HEALTH_STATUS;


-- 정규화 전 회원의 건강상태 조회
SELECT M.M_ID, M.M_NAME, M.GENDER, M.HEALTH
FROM MEMBER M;

WHERE M.M_ID = 'user2';


-- 정규화 후 회원의 건강상태 조회
SELECT M.M_ID, M.M_NAME, M.GENDER, HS.HS_NAME
FROM MEMBER_INFO M
JOIN MEMBER_HEALTH_STATUS MHS ON M.M_ID = MHS.M_ID
JOIN HEALTH_STATUS HS ON MHS.HS_ID = HS.HS_ID;

WHERE M.M_ID = 'user1';

